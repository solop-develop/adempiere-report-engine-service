plugins {
    id 'java'
    id 'com.google.protobuf' version '0.9.4'
    id 'idea'
    id 'application'
    id 'visual-studio'
    id 'maven-publish'
}

group 'com.nikhilm'

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_17
}

def grpcVersion = '1.63.0'
def protobufVersion = '3.25.3'

def descriptorFile = "adempiere-report-engine-service.dsc"
def javaMainClass = "org.spin.report_engine.server.ReportEngineServer"

repositories {
	mavenLocal()
	mavenCentral()
	maven {
		url = 'https://maven.pkg.github.com/solop-develop/adempiere-solop'
		credentials {
			// project property, system properrty, enviroment variable
			username = findProperty("deployUsername") ?: System.properties['deploy.user'] ?: System.getenv("GITHUB_DEPLOY_USER")
			password = findProperty("deployToken") ?: System.properties['deploy.token'] ?: System.getenv("GITHUB_DEPLOY_TOKEN")
		}
	}
	maven {
		// Adempiere GitHub Organization
		url = 'https://maven.pkg.github.com/solop-develop/adempiere-base'
		credentials {
			// project property, system properrty, enviroment variable
			username = findProperty("deployUsername") ?: System.properties['deploy.user'] ?: System.getenv("GITHUB_DEPLOY_USER")
			password = findProperty("deployToken") ?: System.properties['deploy.token'] ?: System.getenv("GITHUB_DEPLOY_TOKEN")
		}
	}
	maven {
		url = "https://maven.google.com/"
	}
}
dependencies {
    implementation fileTree(
        dir: 'dependencies',
        include: [
            '*.jar'
        ]
    )
	implementation "io.netty:netty-handler:4.1.107.Final"
    implementation "io.grpc:grpc-alts:${grpcVersion}"
	runtimeOnly "io.grpc:grpc-netty-shaded:${grpcVersion}"
    implementation "io.grpc:grpc-protobuf:${grpcVersion}"
    implementation "io.grpc:grpc-stub:${grpcVersion}"
    implementation "io.grpc:grpc-netty:${grpcVersion}"
    // https://mvnrepository.com/artifact/com.google.protobuf/protobuf-java
	implementation "com.google.protobuf:protobuf-java:${protobufVersion}"
	implementation "com.google.protobuf:protobuf-java-util:${protobufVersion}"
    implementation 'javax.activation:activation:1.1.1'
	//	Others
    compileOnly 'org.apache.tomcat:annotations-api:6.0.53'
	// ADempiere External Libraries
	implementation 'io.vavr:vavr:0.10.4'

	//	Others
	compileOnly 'org.apache.tomcat:annotations-api:6.0.53'
	implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.17.0'
	implementation "org.apache.poi:poi-ooxml:5.2.5"

	//	ADempiere Core + Patches + Features
	implementation "com.solop:adempiere.solop_libs:clean-0.3.0"
}

configurations.all {
	resolutionStrategy {
		// used by aws-java-sdk-core (storefront is joda-time-2.10.4)
		force("joda-time:joda-time:2.8.1")
		// force("io.github.adempiere:adempiere-grpc-utils:local-1.0.0")
	}
}

protobuf {
    protoc {
		artifact = "com.google.protobuf:protoc:${protobufVersion}"
    }
    plugins {
        grpc {
			artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
		}
		all().configureEach { task ->
			// If true, will generate a descriptor_set.desc file under
			// task.outputBaseDir. Default is false.
			// See --descriptor_set_out in protoc documentation about what it is.
			task.generateDescriptorSet = true

			// Allows to override the default for the descriptor set location
			task.descriptorSetOptions.path = "${projectDir}/build/descriptors/${descriptorFile}"
			// task.descriptorSetOptions.path = "${projectDir}/build/descriptors/adempiere-processors-service.dsc"

			// If true, the descriptor set will contain line number information
			// and comments. Default is false.
			task.descriptorSetOptions.includeSourceInfo = true
		
			// If true, the descriptor set will contain all transitive imports and
			// is therefore self-contained. Default is false.
			task.descriptorSetOptions.includeImports = true
		}
	}
}
// Copy proto descriptor another folder
allprojects {
	task copyDescriptor(type: Copy) {
		from "${projectDir}/build/descriptors/${descriptorFile}"
		into "${projectDir}/resources/"
		// into "${projectDir}/docker-compose/envoy/definitions/"
		// rename { "${descriptorFile}" }
	}

	tasks.matching {
		it.name.startsWith('compileJava')
	}.each { task ->
		task.finalizedBy copyDescriptor
	}
}

// Inform IDEs like IntelliJ IDEA, Eclipse or NetBeans about the generated code.
sourceSets {
    main {
        java {
            srcDirs 'build/generated/source/proto/main/grpc'
            srcDirs 'build/generated/source/proto/main/java'
            srcDirs 'src/main/proto'
        }
        resources {
    		srcDirs 'src/main/java'
			include 'org/spin/base/version.properties'
    	}
    }
}

startScripts.enabled = false

run {
	args = [
		"resources/standalone.yaml"
	]
}

application {
	// mainClass = javaMainClass
	mainClass.set(javaMainClass)
}
jar {
	manifest {
		attributes(
			'Main-Class': javaMainClass
		)
	}
}

task AdempiereReportEngineServer(type: CreateStartScripts) {
	mainClass = javaMainClass
    applicationName = 'adempiere-report-engine-service-server'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = jar.outputs.files + project.configurations.runtimeClasspath
}

applicationDistribution.into('bin') {
	from(AdempiereReportEngineServer)
    fileMode = 0755
}

//	Create release for project
task createRelease(type: Copy) {
   dependsOn build
   from file("$buildDir/distributions/")
   into file("$buildDir/release/")
   //destinationDir(file('build/release/'))
   doLast {
        file('build/release/')
        	.listFiles({file -> file.isFile()} as FileFilter).sort()
        	.each { File file ->
            ant.checksum file: file
        }
   	}
}

task cleanBuild(type: GradleBuild) {
	tasks = ['clean', 'build']
}
